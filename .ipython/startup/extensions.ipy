import sys
from pathlib import Path

try:
    %load_ext dotenv
    print(f"Loaded extension dotenv", file=sys.stderr)
except ModuleNotFoundError as e:
    pass

# try:
# #     %load_ext autoreload
#     %autoreload 3
# except ModuleNotFoundError as e:
#     print(f'Failed loading extension autoreload: {e}', file=sys.stderr)

try:
    %load_ext ipython_autoimport
    print(f"Loaded extension ipython_autoimport", file=sys.stderr)
except ModuleNotFoundError as e:
    print(f"Failed loading extension ipython_autoimport: {e}", file=sys.stderr)

try:
    %load_ext rich
    print(f"Loaded extension rich", file=sys.stderr)
except ModuleNotFoundError as e:
    print(f"Failed loading extension rich: {e}", file=sys.stderr)

try:
    %autocall 1
    print(f"Loaded %autocall 1", file=sys.stderr)
except Exception as e:
    print(f"Failed %autocall 1. {type(e).__qualname__}: {e}", file=sys.stderr)


def ensure_ipython_dir_in_path():
    parent = Path(__file__).parent
    while not (ipython_dir := parent / ".ipython").is_dir() and parent != parent.root:
        parent = parent.parent
    if (
        (ipython_dir / "extensions").is_dir()
        and str(ipython_dir) not in sys.path
        and str(ipython_dir) + "/" not in sys.path
    ):
        sys.path.append(str(ipython_dir))


ensure_ipython_dir_in_path()

%load_ext extensions.copy
%load_ext extensions.ipickle
%load_ext extensions.ijson

try:
    %load_ext ipython_clipboard
    print(f"Loaded extension IPythonClipboard", file=sys.stderr)
except ModuleNotFoundError as e:
    print(f"Failed loading extension IPythonClipboard: {e}", file=sys.stderr)

# %load_ext line_profiler
# %load_ext ipython_cells
